import sys
sys.path.extend('../GWASCatalogSearchDB')
from src.query_database import resources_annotated_with_terms
import sqlite3
import pandas as pd
import owlready2
import bioregistry
import os

### Tests ###
#
# Pick some EFO terms, including:
#   (a) search_terms=['EFO:0005140'] (autoimmune disease) which has 5 direct and 311 inherited mappings
#   (b) search_terms=['EFO:0000001'] (experimental factor) has 0 direct and 27844 inherited mappings
#   (c) search_terms=['EFO:0009605','EFO:0005741'] (pancreas , infectious disease)
#
# 1) Check that the count of direct mappings reported in efo_labels table for term Q is the same as
#    the number of results obtained when doing the SQL query through the function:
#       query_database.resources_annotated_with_term(search_terms=Q,
#                                                    include_subclasses=False,
#                                                    direct_subclasses_only=False)
#       where Q = (a) and when Q = (b)

# 2) Check that the count of inherited mappings reported in efo_labels table for term Q is the same as
#    the number of results obtained when doing the SQL query through the function:
#       query_database.resources_annotated_with_term(search_terms=Q,
#                                                    include_subclasses=True,
#                                                    direct_subclasses_only=False)
#       where Q = (a) and when Q = (b)

# 3) Check that every value of MAPPED_TRAIT_CURIE in gwascatalog_mappings table also exists in the efo_labels table
#       If some CURIE is not in efo_labels, it is likely there is a naming discrepancy between CURIEs in the ontology
#       tables and CURIEs generated by text2term+bioregistry

# 4) Check that the result set of a query with multiple search terms returns resources mapped to any one of the terms
# query_database.resources_annotated_with_term(search_terms=Q,
#                                              include_subclasses=True,
#                                              direct_subclasses_only=False)
#       where Q = (c)

AUTOIMMUNE_DISEASE = 'EFO:0005140'
EXPERIMENTAL_FACTOR = 'EFO:0000001'
INFECTIOUS_DISEASE = 'EFO:0005741'
ACUTE_LUKEMIA = 'EFO:0000094'

MAPPINGS_ONTOLOGY_IRI = os.path.join("src", "mappings", "efo_mappings.owl")

def main():
    efo_labels = pd.read_csv('resources/efo_labels.tsv', sep='\t')
    ai_row = efo_labels.loc[efo_labels["Subject"] == AUTOIMMUNE_DISEASE]
    ai_direct = int(ai_row["Direct"])
    ai_indirect = int(ai_row["Inherited"])
    ai_both = ai_direct + ai_indirect

    ef_row = efo_labels.loc[efo_labels["Subject"] == EXPERIMENTAL_FACTOR]
    ef_direct = int(ef_row["Direct"])
    ef_indirect = int(ef_row["Inherited"])
    ef_both = ef_direct + ef_indirect

    id_row = efo_labels.loc[efo_labels["Subject"] == INFECTIOUS_DISEASE]
    id_direct = int(id_row["Direct"])
    id_indirect = int(id_row["Inherited"])
    id_both = id_direct + id_indirect

    al_row = efo_labels.loc[efo_labels["Subject"] == ACUTE_LUKEMIA]
    al_direct = int(al_row["Direct"])
    al_indirect = int(al_row["Inherited"])
    al_both = al_direct + al_indirect

    id_al_both = id_both + al_both

    gwas_mappings = pd.read_csv('resources/gwascatalog_mappings.tsv', sep='\t')
    all_labels = efo_labels["Subject"].values.tolist()
    all_mapping_curies = gwas_mappings["MAPPED_TRAIT_CURIE"].values.tolist()
    ## Connect to the server
    connection = sqlite3.connect("gwascatalog_search.db")
    cursor = connection.cursor()

    # Obtain data from the server
    direct_maps_aid = resources_annotated_with_terms(cursor, [AUTOIMMUNE_DISEASE], False, False)
    indirect_maps_aid = resources_annotated_with_terms(cursor, [AUTOIMMUNE_DISEASE], True, False)
    direct_maps_ef = resources_annotated_with_terms(cursor, [EXPERIMENTAL_FACTOR], False, False)
    indirect_maps_ef = resources_annotated_with_terms(cursor, [EXPERIMENTAL_FACTOR], True, False)
    both_indirect_maps = resources_annotated_with_terms(cursor, [INFECTIOUS_DISEASE, ACUTE_LUKEMIA], True, False)

    # This code is used for debugging purposes. Uncomment only when tests don't work.
    # world = owlready2.World()
    # world.get_ontology(MAPPINGS_ONTOLOGY_IRI).load()
    # indirect_owl = get_instances_of_term(world, AUTOIMMUNE_DISEASE)
    # ind_maps_labels = indirect_maps_aid["STUDY.ACCESSION"].values.tolist()
    # for mapping in indirect_owl:
    #     if mapping not in ind_maps_labels:
    #         print(mapping)

    error_string = "Incorrect number of {} mappings: {} instead of {}"

    ############################### Tests ###############################

    # 1) Direct Mappings
    assert len(direct_maps_aid.index) == ai_direct, error_string.format("direct autoimmune", len(direct_maps_aid.index), ai_direct)
    assert len(direct_maps_ef.index) == ef_direct, error_string.format("direct ef", len(direct_maps_ef.index), ef_direct)
    # 2) Indirect Mappings
    assert len(indirect_maps_aid.index) == ai_both, error_string.format("indirect autoimmune", len(indirect_maps_aid.index), ai_both)
    assert len(indirect_maps_ef.index) == ef_both, error_string.format("indirect ef", len(indirect_maps_ef.index), ef_both)
    # 3) Check if all CURIEs are contained in labels
    all_contained = True
    curie_errors = []
    for curie in all_mapping_curies:
        if curie not in all_labels:
            all_contained = False
            if curie not in curie_errors:
                curie_errors.append(curie)
    assert all_contained, "Not all CURIEs in mappings contained in labels: " + str(curie_errors)
    # 4) Multiple Mappings
    assert len(both_indirect_maps.index) == id_al_both, error_string.format("indirect infectious and acute lukemia", len(both_indirect_maps.index), id_al_both)

    ############################ Tests End ##############################

    # Close server connection
    cursor.close()
    connection.close()

def get_instances_of_term(ontology_world, ontology_term_curie, save_to_file=False):
    ontology_term_iri = bioregistry.get_iri(ontology_term_curie, priority=["obofoundry", "default"])
    ontology_term = ontology_world.world[ontology_term_iri]
    resources_annotated_with_ontology_term = ontology_term.instances()
    resource_identifiers = set()
    for resource in resources_annotated_with_ontology_term:
        resource_identifiers.add(resource.resource_id[0])
    print(f"{len(resource_identifiers)} resources annotated with ontology term {ontology_term_curie}")
    if save_to_file:
        pd.DataFrame(resource_identifiers).to_csv(
            os.path.join("resources", ontology_term.name + "_resources.txt"), index=False, header=False)
    return resource_identifiers

if __name__ == '__main__':
    main()
